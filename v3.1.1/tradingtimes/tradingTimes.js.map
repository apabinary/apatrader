{"version":3,"sources":["../../../../src/tradingtimes/tradingTimes.es6"],"names":["table","tradingWin","processData","markets","market_names","submarket_names","forEach","market","push","display_name","submarkets","submarket","getRowsFor","marketname","submarket_name","filter","m","symbols","s","instruments","rows","map","sym","times","open","close","settlement","events","descrip","dates","init","$menuLink","require","click","createBlankWindow","title","i18n","width","height","track","module_id","is_unique","data","dialog","initTradingWin","moveToTop","$html","subheader","appendTo","dataTable","className","paging","ordering","searching","processing","parent","addClass","api","columns","every","column","header","on","search","value","draw","refreshTable","yyyy_mm_dd","processing_msg","attr","show","updateTable","result","market_name","console","log","remove","add","refresh","extractChartableMarkets","select","makeSelectmenu","list","inx","changed","val","update_list","sub_select","hide","cached","send","trading_times","then","catch","error","growl","message","warn","Date","toISOString","slice","addDateToHeader","date"],"mappings":"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","file":"tradingTimes.js","sourcesContent":["ï»¿/**\r\n * Created by amin on 10/5/15.\r\n */\r\nimport $ from 'jquery';\r\nimport windows from 'windows/windows';\r\nimport liveapi from 'websockets/binary_websockets';\r\nimport menu from 'navigation/menu';\r\nimport 'datatables';\r\nimport 'jquery-growl';\r\n\r\nlet table = null;\r\nlet tradingWin = null;\r\n\r\n/* data: result of trading_times api */\r\nconst processData = (markets) => {\r\n   markets = markets || [];\r\n   //    || [{\r\n   //    display_name: 'Forex',\r\n   //    submarkets: [{\r\n   //        display_name: 'Major Paris',\r\n   //        instruments: [{\r\n   //            delay_amount: 0,\r\n   //            events: [{dates:'Fridays',descrip:'Closes early at(21:00)'}],\r\n   //            display_name: 'AUD/JPY',\r\n   //            settlement: '23:59:59',\r\n   //            symbol: 'frxAUDJPY',\r\n   //            times: {\r\n   //                close: ['23:59:59'],\r\n   //                open: ['00:00:00']\r\n   //            }\r\n   //        }]\r\n   //    }]\r\n   //}];\r\n   /* extract market and submarket names */\r\n   const market_names = [];\r\n   const submarket_names = { };\r\n   markets.forEach((market) => {\r\n      market_names.push(market.display_name);\r\n      submarket_names[market.display_name] = [];\r\n      market.submarkets.forEach(\r\n         (submarket) => submarket_names[market.display_name].push(submarket.display_name)\r\n      )\r\n   });\r\n\r\n   /* get the rows for this particular marketname and sumbarket_name */\r\n   const getRowsFor = (marketname, submarket_name) => {\r\n      // TODO: comeback and use lodash once 'trade module' changes got merged.\r\n      const market = markets.filter((m) => (m.display_name == marketname))[0];\r\n      const symbols = market && market.submarkets.filter((s) => (s.display_name == submarket_name))[0].instruments;\r\n\r\n      const rows = (symbols || []).map((sym) => {\r\n         return [\r\n            sym.display_name,\r\n            sym.times.open[0],\r\n            sym.times.close[0],\r\n            sym.times.settlement || sym.settlement || '-',\r\n            sym.events[0] ? sym.events[0].descrip + ':' + sym.events[0].dates : '-'\r\n         ];\r\n      });\r\n      return rows;\r\n   }\r\n\r\n   return {\r\n      market_names: market_names,\r\n      submarket_names: submarket_names,\r\n      getRowsFor: getRowsFor\r\n   };\r\n}\r\n\r\nexport const init = ($menuLink) => {\r\n   require([\"css!tradingtimes/tradingTimes.css\"]);\r\n   $menuLink.click(() => {\r\n      if (!tradingWin) {\r\n         tradingWin = windows.createBlankWindow($('<div/>'), {\r\n            title: 'Trading Times'.i18n(),\r\n            width: 700 ,\r\n            height: 400\r\n         });\r\n         tradingWin.track({\r\n            module_id: 'tradingTimes',\r\n            is_unique: true,\r\n            data: null\r\n         });\r\n         tradingWin.dialog('open');\r\n         require(['text!tradingtimes/tradingTimes.html'], initTradingWin);\r\n      }\r\n      else\r\n         tradingWin.moveToTop();\r\n   });\r\n}\r\n\r\nconst initTradingWin = ($html) => {\r\n   $html = $($html).i18n();\r\n   const subheader = $html.filter('.trading-times-sub-header');\r\n   table = $html.filter('table');\r\n   $html.appendTo(tradingWin);\r\n\r\n   table = table.dataTable({\r\n      data: [],\r\n      \"columnDefs\": [\r\n         { className: \"dt-body-center dt-header-center\", \"targets\": [ 0,1,2,3,4 ] }\r\n      ],\r\n      paging: false,\r\n      ordering: false,\r\n      searching: true,\r\n      processing: true\r\n   });\r\n   table.parent().addClass('hide-search-input');\r\n\r\n   // Apply the a search on each column input change\r\n   table.api().columns().every(function () {\r\n      const column = this;\r\n      $('input', this.header()).on('keyup change', function () {\r\n         if (column.search() !== this.value)\r\n            column.search(this.value) .draw();\r\n      });\r\n   });\r\n\r\n   let market_names = null,\r\n      submarket_names = null;\r\n\r\n   const refreshTable = (yyyy_mm_dd) => {\r\n      const processing_msg = $('#' + table.attr('id') + '_processing').show();\r\n\r\n      /* update the table with the given marketname and submarketname */\r\n      const updateTable =(result, market_name,submarket_name) => {\r\n         console.log(market_name, submarket_name)\r\n         const rows = result.getRowsFor(market_name, submarket_name);\r\n         console.log(rows);\r\n         table.api().rows().remove();\r\n         table.api().rows.add(rows);\r\n         table.api().draw();\r\n      }\r\n\r\n      /* refresh the table with result of {trading_times:yyyy_mm_dd} from WS */\r\n      const refresh = (data) => {\r\n         data = menu.extractChartableMarkets(data);\r\n         const result = processData(data);\r\n\r\n         if (market_names == null) {\r\n            const select = $('<select />');\r\n            select.appendTo(subheader);\r\n            market_names = windows.makeSelectmenu(select, {\r\n               list: result.market_names,\r\n               inx: 0,\r\n               changed: (val) => {\r\n                  submarket_names.update_list(result.submarket_names[val]);\r\n                  updateTable(result, market_names.val(), submarket_names.val());\r\n               }\r\n            });\r\n         }\r\n\r\n         if (submarket_names == null) {\r\n            const sub_select = $('<select />');\r\n            sub_select.appendTo(subheader);\r\n            submarket_names = windows.makeSelectmenu(sub_select, {\r\n               list: result.submarket_names[market_names.val()],\r\n               inx: 0,\r\n               changed: (val) => updateTable(result, market_names.val(), submarket_names.val())\r\n            });\r\n         }\r\n\r\n         updateTable(result, market_names.val(), submarket_names.val());\r\n         processing_msg.hide();\r\n      };\r\n\r\n      liveapi.cached.send({ trading_times: yyyy_mm_dd })\r\n         .then(refresh)\r\n         .catch((error) => {\r\n            $.growl.error({ message: error.message });\r\n            console.warn(error);\r\n            refresh({});\r\n         });\r\n   }\r\n\r\n   refreshTable(new Date().toISOString().slice(0, 10));\r\n   tradingWin.addDateToHeader({\r\n      title: 'Date: ',\r\n      date: new Date(),\r\n      changed: refreshTable\r\n   });\r\n}\r\n\r\nexport default {\r\n   init\r\n}\r\n"]}