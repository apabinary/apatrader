{"version":3,"sources":["../../../../src/charts/chartTemplateManager.es6"],"names":["local_storage","get","set","ChartTemplateManager","root","dialog_id","_this","templates","forEach","tmpl","random","setRandom","state","init_state","require","append","html","i18n","view","bind","chart","highcharts","route","value","menu","save_changes_disabled","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_chart_options","findIndex","t","update","save_as","options","name","timePeriod","type","concat","indicators","map","ind","overlays","overlay","displaySymbol","join","save_changes","inx","push","growl","notice","message","open_file_selector","event","find","click","upload","file","target","files","reader","FileReader","onload","e","contents","result","data","JSON","parse","substring","replace","hash","isDuplicate","error","includes","apply","readAsText","preventDefault","set_chart_options","download","json","stringify","download_file_in_browser","remove","filter","rename","do_rename","new_name","apply_chart_options","confirm","action","currentTarget","text","confirm_prevMenu","confirm_text","confirm_yes","confirm_no","hashCode","s","split","reduce","a","b","charCodeAt","tmpl_copy","unbind","init"],"mappings":"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","file":"chartTemplateManager.js","sourcesContent":["/**\r\n * Created by amin on July 31, 2016.\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport chartWindow from 'charts/chartWindow';\r\nimport rv from 'common/rivetsExtra';\r\nimport _ from 'lodash';\r\n\r\nif(!local_storage.get('templates')) {\r\n  local_storage.set('templates', []);\r\n}\r\n\r\nclass ChartTemplateManager {\r\n  constructor(root, dialog_id) {\r\n    const _this = this;\r\n    const templates = local_storage.get(\"templates\");\r\n    templates.forEach(function(tmpl){\r\n      if(!tmpl.random){\r\n        tmpl = _this.setRandom(tmpl);\r\n      }\r\n    });\r\n    local_storage.set(\"templates\",templates);\r\n\r\n    const state = this.init_state(root, dialog_id);\r\n    require(['text!charts/chartTemplateManager.html'], html => {\r\n      root.append(html.i18n());\r\n      this.view = rv.bind(root[0], state);\r\n    });\r\n  }\r\n\r\n  init_state(root, dialog_id) {\r\n\r\n    const chart = $('#' + dialog_id + '_chart').highcharts();\r\n    const state = {\r\n      route: { value: 'menu' },\r\n      menu: {\r\n        save_changes_disabled: true\r\n      },\r\n      templates: {\r\n        array: local_storage.get('templates'),\r\n        save_as_value: '',\r\n        rename_tmpl: null,\r\n        rename_value: '',\r\n        current: null,\r\n      }\r\n    };\r\n    const {route, templates, menu} = state;\r\n\r\n    /* persist applied templates between page reloads */\r\n    const current_tmpl = this.setRandom(chartWindow.get_chart_options(dialog_id));\r\n    templates.array = local_storage.get(\"templates\");\r\n    if(_.findIndex(templates.array, t => t.random === current_tmpl.random) !== -1) {\r\n      templates.current = current_tmpl;\r\n    }\r\n\r\n    route.update = value => {\r\n      route.value = value;\r\n    };\r\n\r\n    menu.save_as = () => {\r\n      const options = chartWindow.get_chart_options(dialog_id) || {};\r\n      options.name = [`${options.timePeriod} ${options.type}`]\r\n                    .concat(options.indicators.map(ind => ind.name))\r\n                    .concat(options.overlays.map(overlay => overlay.displaySymbol))\r\n                    .join(' + ');\r\n      templates.save_as_value = options.name;\r\n      route.update('save-as');\r\n    }\r\n\r\n    menu.templates = () => {\r\n      templates.array = local_storage.get('templates'); // it can be modified from other dialogs.\r\n      route.update('templates');\r\n    }\r\n\r\n    menu.save_changes = () => {\r\n      const current = this.setRandom(chartWindow.get_chart_options(dialog_id));\r\n      const name = current.name;\r\n      const array = local_storage.get('templates');\r\n      const inx = _.findIndex(array, t => t.name === name);\r\n      if(inx !== -1) {\r\n        array[inx] = current;\r\n      } else {\r\n        array.push(current);\r\n      }\r\n      local_storage.set('templates', array);\r\n      templates.array = array;\r\n      templates.current = current;\r\n      $.growl.notice({message: 'Template changes saved '.i18n() + '(' + current.name + ')'});\r\n    }\r\n\r\n    menu.open_file_selector = (event) => {\r\n      $(root).find(\"input[type=file]\").click();\r\n    }\r\n\r\n    menu.upload = (event) => {\r\n      const _this = this;\r\n      const file = event.target.files[0];\r\n      event.target.value = null;\r\n      if(!file)\r\n        return;\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const contents = e.target.result;\r\n        const array = local_storage.get(\"templates\");\r\n        let data = null;\r\n        try{\r\n          data = JSON.parse(contents);\r\n          data.name = data.name.substring(0,20).replace(/[<>]/g,\"-\");\r\n          const hash = data.random;\r\n          data = _this.setRandom(data);\r\n          if(hash !== data.random){\r\n            throw \"Invalid JSON file\".i18n();\r\n          }\r\n\r\n          if(_this.isDuplicate(data, array)){\r\n            return;\r\n          }\r\n\r\n          if(!data.indicators) {\r\n            throw \"Invalid template type\".i18n();\r\n          }\r\n        } catch(e){\r\n          $.growl.error({message:e});\r\n          return;\r\n        }\r\n\r\n        // Rename duplicate template names.\r\n        let file = 1,\r\n            name = data.name;\r\n        while(1){\r\n          if(array.map(t => t.name).includes(name)) {\r\n            name = data.name + \" (\" + file + \")\"\r\n            file++;\r\n            continue;\r\n          }\r\n          data.name = name;\r\n          break;\r\n        }\r\n\r\n        templates.apply(data);\r\n        array.push(data);\r\n        local_storage.set('templates', array);\r\n        templates.array = array;\r\n        $.growl.notice({message: \"Successfully applied the template and saved it as \".i18n() + \"<b>\" + data.name + \"</b>\"});\r\n      }\r\n\r\n      reader.readAsText(file);\r\n    }\r\n\r\n    templates.save_as = (event) => {\r\n      event.preventDefault();\r\n      const name = templates.save_as_value.substring(0,20).replace(/[<>]/g,\"-\");\r\n      const options = this.setRandom(chartWindow.get_chart_options(dialog_id));\r\n      if(options) {\r\n        options.name = name;\r\n        const array = local_storage.get('templates');\r\n        if(this.isDuplicate(options, array)){\r\n          return;\r\n        }\r\n        array.push(options);\r\n        templates.current = options;\r\n        local_storage.set('templates', array);\r\n        templates.array = array;\r\n        route.update('menu');\r\n        chartWindow.set_chart_options(dialog_id, options); /* update the name */\r\n      }\r\n    }\r\n\r\n    templates.download = (tmpl) => {\r\n      var json = JSON.stringify(tmpl);\r\n      download_file_in_browser(tmpl.name + '.json', 'text/json;charset=utf-8;', json);\r\n      $.growl.notice({message: \"Downloading template as <b>\".i18n() + tmpl.name + \".json</b>\"});\r\n    }\r\n\r\n    templates.remove = (tmpl) => {\r\n      let array = local_storage.get('templates');\r\n      templates.array = array.filter(t => t.name !== tmpl.name);\r\n      local_storage.set('templates', templates.array);\r\n      if(templates.current && tmpl.name === templates.current.name) {\r\n        templates.current = null;\r\n      }\r\n    }\r\n\r\n    templates.rename = tmpl => {\r\n      templates.rename_value = tmpl.name;\r\n      templates.rename_tmpl = tmpl;\r\n      route.update('rename');\r\n    }\r\n\r\n    templates.do_rename = (event) => {\r\n      event.preventDefault();\r\n      const name = templates.rename_tmpl.name;\r\n      const new_name = templates.rename_value.substring(0,20).replace(/[<>]/g,\"-\");\r\n      const array = local_storage.get('templates');\r\n      if(array.map(t => t.name).includes(new_name)) {\r\n          $.growl.error({message: 'Template name already exists'.i18n() });\r\n          return;\r\n      };\r\n      const tmpl = array.find(t => t.name === name);\r\n      if(tmpl) {\r\n        tmpl.name = new_name;\r\n        local_storage.set('templates', array);\r\n        templates.array = array;\r\n        route.update('templates');\r\n\r\n        /* update template name in chartWindow options */\r\n        const current = this.setRandom(chartWindow.get_chart_options(dialog_id));\r\n        if(current.name == name) {\r\n          current.name = new_name;\r\n          chartWindow.set_chart_options(dialog_id, current);\r\n          templates.current = current;\r\n        }\r\n      }\r\n    }\r\n\r\n    templates.apply = tmpl => {\r\n      chartWindow.apply_chart_options(dialog_id, tmpl);\r\n      templates.current = tmpl;\r\n    }\r\n\r\n    templates.confirm = (tmpl, event) => {\r\n      route.update(\"confirm\");\r\n      const action = event.currentTarget.text;\r\n      templates.confirm_prevMenu = action === \"Delete\".i18n() ? \"templates\" : \"menu\";\r\n      templates.confirm_text = action === \"Delete\" ? \"Are you sure you want to delete template?\".i18n() : \"Are you sure you want to overwrite current template?\".i18n();\r\n\r\n      templates.confirm_yes = () => {\r\n        action === \"Delete\".i18n()? templates.remove(tmpl) : menu.save_changes();\r\n        templates.confirm_no();\r\n      }\r\n\r\n      templates.confirm_no = () => {\r\n        route.update(templates.confirm_prevMenu);\r\n      }\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  // Create random independent of template name to find duplicates more accurately.\r\n  setRandom(tmpl) {\r\n    const name = tmpl.name;\r\n    delete tmpl.name;\r\n    delete tmpl.random;\r\n    tmpl.random = this.hashCode(JSON.stringify(tmpl));\r\n    tmpl.name = name;\r\n    return tmpl;\r\n  }\r\n\r\n  hashCode(s) {\r\n    return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\r\n  }\r\n\r\n  isDuplicate(tmpl, array){\r\n    // get template with same values.\r\n    const tmpl_copy = _.find(array, ['random', tmpl.random]);\r\n    if(tmpl_copy){\r\n      $.growl.error({message: 'Template already saved as '.i18n() +'<b>' + tmpl_copy.name + '</b>.'});\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  unbind() {\r\n      this.view && this.view.unbind();\r\n      this.view = null;\r\n    }\r\n}\r\n\r\nexport const init = (root, dialog_id) => new ChartTemplateManager(root, dialog_id);\r\nexport default { init, }\r\n"]}