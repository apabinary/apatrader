{"version":3,"sources":["../../../../../src/charts/indicators/indicatorBuilder.es6"],"names":["before_add_callback","closeDialog","dialog","remove","init","chart","indicator","require","$html","state","id","fields","map","f","is_valid","levels","formula","description","cdl_indicator","dash_styles","name","dash","url","update_value","row","value","level","marginTop","visible","add","forEach","field","key","label","text","values","push","cancel","inx","indexOf","splice","e","btn","target","find","next","height","content","animate","scrollTop","prop","editable","current_options","opt_val","opt_key","cloneDeep","view","bind","options","title","long_display_name","autoOpen","resizable","width","modal","my","at","of","window","dialogClass","buttons","click","fields_are_valid","JSON","parse","stringify","type","length","color","from","minBy","to","maxBy","cdlIndicatorCode","onSeriesID","series","growl","error","message","i18n","addIndicator","icons","close","minimize","maximize","dialogExtend","extend","maximizable","minimizable","collapsable","open","containerIDWithHash","before_add_cb","highcharts"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,QAAIA,sBAAsB,IAA1B;;AAEA,QAAMC,cAAc,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC5BA,eAAOA,MAAP,CAAc,SAAd,EAAyBC,MAAzB;AACH,KAFD;;AAIA,QAAMC;AAAA,gEAAO,iBAAOC,KAAP,EAAcC,SAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAETC,oCAAQ,CAAC,4CAAD,CAAR;;AAFS;AAAA,mCAIWA,QAAQ,CAAC,8CAAD,CAAR,CAJX;;AAAA;AAAA;AAAA;AAIJC,iCAJI;AAMHC,iCANG,GAMK;AACZC,oCAAIJ,UAAUI,EADF;AAEZC,wCAAQL,UAAUK,MAAV,CAAiBC,GAAjB,CAAqB;AAAA,wDAAUC,CAAV,IAAaC,UAAU,IAAvB;AAAA,iCAArB,CAFI;AAGZC,wCAAQT,UAAUS,MAHN,EAGc;AAC1BC,yCAASV,UAAUU,OAJP,EAIgB;AAC5BC,6CAAaX,UAAUW,WALX;AAMZC,+CAAeZ,UAAUY,aANb,EAM4B;AACxCC,6CAAa,CACX,OADW,EACF,WADE,EACW,UADX,EACuB,cADvB,EACuC,iBADvC,EAEX,KAFW,EAEJ,MAFI,EAEI,UAFJ,EAEgB,SAFhB,EAE2B,aAF3B,EAE0C,gBAF1C,EAGXP,GAHW,CAGP;AAAA,2CAAS,EAAEQ,MAAMC,IAAR,EAAcC,2BAAyBD,IAAzB,SAAd,EAAT;AAAA,iCAHO,CAPD;AAWZE,4CAXY,wBAWCC,GAXD,EAWMC,KAXN,EAWa;AACvBD,wCAAIC,KAAJ,GAAYA,KAAZ;AACD,iCAbW;;AAcZC,uCAAO;AACLxB,4CAAQ;AACNyB,mDAAW,KADL;AAENC,iDAAS,KAFH;AAGNC,6CAAK,eAAM;AACT,gDAAMlB,SAASF,MAAMM,MAAN,CAAaJ,MAA5B;AACA,gDAAMe,QAAQ,EAAd;AACAf,mDAAOmB,OAAP,CAAe;AAAA,uDAASJ,MAAMK,MAAMC,GAAZ,IAAmBD,MAAMN,KAAlC;AAAA,6CAAf;AACAC,kDAAMO,KAAN,GAAc,EAAEC,MAAMR,MAAMD,KAAd,EAAd;AACAhB,kDAAMM,MAAN,CAAaoB,MAAb,CAAoBC,IAApB,CAAyBV,KAAzB;AACAjB,kDAAMiB,KAAN,CAAYxB,MAAZ,CAAmB0B,OAAnB,GAA6B,KAA7B;AACD,yCAVK;AAWNS,gDAAQ,kBAAM;AAAE5B,kDAAMiB,KAAN,CAAYxB,MAAZ,CAAmB0B,OAAnB,GAA6B,KAA7B;AAAqC;AAX/C,qCADH;AAcLzB,4CAAQ,qBAAO;AACb,4CAAMgC,SAAS1B,MAAMM,MAAN,CAAaoB,MAA5B;AACA,4CAAMG,MAAMH,OAAOI,OAAP,CAAef,GAAf,CAAZ;AACAc,gDAAQ,CAAC,CAAT,IAAcH,OAAOK,MAAP,CAAcF,GAAd,EAAmB,CAAnB,CAAd;AACD,qCAlBI;AAmBLT,yCAAK,aAACY,CAAD,EAAO;AACV,4CAAMC,MAAM,sBAAED,EAAEE,MAAJ,CAAZ;AACA,4CAAMhB,YAAanB,MAAMoC,IAAN,CAAW,YAAX,EAAyBC,IAAzB,GAAgCC,MAAhC,KAA2C,CAA9D;AACArC,8CAAMiB,KAAN,CAAYxB,MAAZ,CAAmByB,SAAnB,GAA+BA,YAAU,CAAC,CAAX,GAAe,IAA9C;AACAlB,8CAAMiB,KAAN,CAAYxB,MAAZ,CAAmB0B,OAAnB,GAA6B,CAACnB,MAAMiB,KAAN,CAAYxB,MAAZ,CAAmB0B,OAAjD;AACA,4CAAGnB,MAAMiB,KAAN,CAAYxB,MAAZ,CAAmB0B,OAAtB,EAA+B;AAC7B,gDAAMmB,UAAU,sBAAE,oBAAF,CAAhB;AACAA,oDAAQC,OAAR,CAAgB,EAAEC,WAAWF,QAAQG,IAAR,CAAa,cAAb,CAAb,EAAhB,EAA4D,GAA5D;AACD;AACF;AA5BI;AAdK,6BANL;;;AAoDT,gCAAG5C,UAAU6C,QAAV,IAAsB7C,UAAU8C,eAAnC,EAAoD;AAClD,iDAAEtB,OAAF,CAAUxB,UAAU8C,eAApB,EAAqC,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACzD,wCAAMvB,QAAQ,iBAAEa,IAAF,CAAOnC,MAAME,MAAb,EAAqB,EAACqB,KAAKsB,OAAN,EAArB,CAAd;AACAvB,8CAAUA,MAAMN,KAAN,GAAc4B,OAAxB;AACD,iCAHD;;AAKA,oCAAG/C,UAAU8C,eAAV,CAA0BrC,MAA7B,EAAqC;AACnCN,0CAAMM,MAAN,CAAaoB,MAAb,GAAsB,iBAAEoB,SAAF,CAAYjD,UAAU8C,eAAV,CAA0BrC,MAAtC,CAAtB;AACD;AACF;;AAGDP,oCAAQ,sBAAEA,KAAF,CAAR;AACMgD,gCAjEG,GAiEI,sBAAGC,IAAH,CAAQjD,MAAM,CAAN,CAAR,EAAkBC,KAAlB,CAjEJ;AAmEHiD,mCAnEG,GAmEO;AACZC,uCAAOrD,UAAUsD,iBADL;AAEZC,0CAAU,KAFE;AAGZC,2CAAW,KAHC;AAIZC,uCAAO,GAJK;AAKZjB,wCAAQ,GALI;AAMZkB,uCAAO,IANK;AAOZC,oCAAI,QAPQ;AAQZC,oCAAI,QARQ;AASZC,oCAAIC,MATQ;AAUZC,6CAAY,6BAVA;AAWZC,yCAAS,CACL;AACIpC,0CAAM,IADV;AAEIqC,2CAAO,iBAAM;AACT,4CAAMb,UAAU,EAAhB;AACA,4CAAIc,mBAAmB,IAAvB;AACA,4CAAG,CAAClE,UAAUY,aAAd,EAA6B;AAAE;AAC7B,gDAAGT,MAAMM,MAAT,EAAiB;AACf2C,wDAAQ3C,MAAR,GAAiB0D,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAelE,MAAMM,MAAN,CAAaoB,MAA5B,CAAX,CAAjB;AACD;AACD1B,kDAAME,MAAN,CAAamB,OAAb,CAAqB,iBAAS;AAC3B0C,mEAAmBzC,MAAMjB,QAAN,IAAkB0D,gBAArC;AACA,oDAAGzC,MAAM6C,IAAN,KAAe,WAAlB,EAA+B;AAC5BlB,4DAAQ3B,MAAMC,GAAd,IAAqBD,MAAMN,KAA3B;AACA;AACF;AACDiC,wDAAQ3B,MAAMC,GAAd,IAAqB,EAArB;AACA,oDAAG0B,QAAQ3C,MAAR,IAAkB2C,QAAQ3C,MAAR,CAAe8D,MAAf,GAAwB,CAA7C,EAAgD;AAC7CnB,4DAAQ3B,MAAMC,GAAd,EAAmBI,IAAnB,CAAwB;AACrB0C,+DAAO/C,MAAMN,KADQ;AAErBsD,8DAAM,iBAAEC,KAAF,CAAQtB,QAAQ3C,MAAhB,EAAwB,OAAxB,EAAiCU,KAFlB;AAGrBwD,4DAAI,iBAAEC,KAAF,CAAQxB,QAAQ3C,MAAhB,EAAwB,OAAxB,EAAiCU;AAHhB,qDAAxB;AAKF;AACH,6CAdD;AAeD,yCAnBD,MAoBK;AAAE;AACJiC,oDAAQyB,gBAAR,GAA2B1E,MAAMC,EAAjC;AACAgD,oDAAQ0B,UAAR,GAAqB/E,MAAMgF,MAAN,CAAa,CAAb,EAAgB3B,OAAhB,CAAwBhD,EAA7C;AACF;;AAEF,4CAAGD,MAAMC,EAAN,KAAa,SAAhB,EAA2B;AAAE;AACzBgD,oDAAQ0B,UAAR,GAAqB/E,MAAMgF,MAAN,CAAa,CAAb,EAAgB3B,OAAhB,CAAwBhD,EAA7C;AACH;;AAED,4CAAG,CAAC8D,gBAAJ,EAAsB;AACnB,6DAAEc,KAAF,CAAQC,KAAR,CAAc,EAAEC,SAAS,wBAAwBC,IAAxB,EAAX,EAAd;AACA;AACF;;AAEAzF,+DAAuBA,qBAAvB;;AAEA;AACAK,8CAAMgF,MAAN,CAAa,CAAb,EAAgBK,YAAhB,CAA6BjF,MAAMC,EAAnC,EAAuCgD,OAAvC;;AAEAzD,oDAAYO,KAAZ;AACH;AA7CL,iCADK,EAgDL;AACI0B,0CAAM,QADV;AAEIqC,2CAAO;AAAA,+CAAMtE,YAAYO,KAAZ,CAAN;AAAA;AAFX,iCAhDK,CAXG;AAgEZmF,uCAAO;AACHC,2CAAO,mBADJ;AAEHC,8CAAU,sBAFP;AAGHC,8CAAU;AAHP;AAhEK,6BAnEP;;AAyITtF,kCAAMN,MAAN,CAAawD,OAAb,EACGqC,YADH,CACgB,iBAAEC,MAAF,CAAStC,OAAT,EAAkB,EAACuC,aAAY,KAAb,EAAoBC,aAAY,KAAhC,EAAuCC,aAAY,KAAnD,EAAlB,CADhB;AAzIS,6DA2IF3F,KA3IE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA,OAAN;;AA8IA;;;;;AAKO,QAAM4F;AAAA,iEAAO,kBAAO9F,SAAP,EAAkB+F,mBAAlB,EAAuCC,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBtG,kDAAsBsG,iBAAiBtG,mBAAvC;;AAEMK,iCAHU,GAGF,sBAAEgG,mBAAF,EAAuBE,UAAvB,EAHE;AAAA;AAAA,mCAIVnG,KAAKC,KAAL,EAAYC,SAAZ,CAJU;;AAAA;;AAMhB,kDAAE,oBAAF,EAAwBJ,MAAxB,CAA+B,MAA/B;AACA,kDAAE,oBAAF,EAAwB8C,OAAxB,CAAgC,EAAEC,WAAW,CAAb,EAAhC,EAAkD,GAAlD;;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA,OAAN;sBASQ,EAAEmD,UAAF,E","file":"indicatorBuilder.js","sourcesContent":["/**\r\n * Created by arnab on 3/1/15.\r\n */\r\n\r\nimport $ from \"jquery\";\r\nimport _ from \"lodash\";\r\nimport rv from '../../common/rivetsExtra';\r\nimport 'jquery-ui';\r\nimport 'color-picker';\r\nimport 'ddslick';\r\n\r\nlet before_add_callback = null;\r\n\r\nconst closeDialog = (dialog) => {\r\n    dialog.dialog(\"destroy\").remove();\r\n}\r\n\r\nconst init = async (chart, indicator) => {\r\n\r\n    require(['css!charts/indicators/indicatorBuilder.css']);\r\n\r\n    let [$html] = await require(['text!charts/indicators/indicatorBuilder.html']);\r\n\r\n    const state = {\r\n      id: indicator.id,\r\n      fields: indicator.fields.map(f => ({...f, is_valid: true})),\r\n      levels: indicator.levels, /* optional */\r\n      formula: indicator.formula, /* optional */\r\n      description: indicator.description,\r\n      cdl_indicator: indicator.cdl_indicator, /* optional (cdl indicators only) */\r\n      dash_styles: [\r\n        \"Solid\", \"ShortDash\", \"ShortDot\", \"ShortDashDot\", \"ShortDashDotDot\",\r\n        \"Dot\", \"Dash\", \"LongDash\", \"DashDot\", \"LongDashDot\", \"LongDashDotDot\"\r\n      ].map(dash => ({ name: dash, url: `images/dashstyle/${dash}.svg`})),\r\n      update_value(row, value) {\r\n        row.value = value;\r\n      },\r\n      level: {\r\n        dialog: {\r\n          marginTop: '0px',\r\n          visible: false,\r\n          add: () => {\r\n            const fields = state.levels.fields;\r\n            const level = { };\r\n            fields.forEach(field => level[field.key] = field.value);\r\n            level.label = { text: level.value };\r\n            state.levels.values.push(level);\r\n            state.level.dialog.visible = false;\r\n          },\r\n          cancel: () => { state.level.dialog.visible = false; }\r\n       },\r\n        remove: row => {\r\n          const values = state.levels.values;\r\n          const inx = values.indexOf(row);\r\n          inx !== -1 && values.splice(inx, 1);\r\n        },\r\n        add: (e) => {\r\n          const btn = $(e.target);\r\n          const marginTop =  $html.find('.levels-tr').next().height() - 3;\r\n          state.level.dialog.marginTop = marginTop*-1 + 'px';\r\n          state.level.dialog.visible = !state.level.dialog.visible;\r\n          if(state.level.dialog.visible) {\r\n            const content = $('.indicator-builder');\r\n            content.animate({ scrollTop: content.prop('scrollHeight')}, 700);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if(indicator.editable && indicator.current_options) {\r\n      _.forEach(indicator.current_options, (opt_val, opt_key) => {\r\n        const field = _.find(state.fields, {key: opt_key})\r\n        field && (field.value = opt_val);\r\n      });\r\n\r\n      if(indicator.current_options.levels) {\r\n        state.levels.values = _.cloneDeep(indicator.current_options.levels);\r\n      }\r\n    }\r\n\r\n\r\n    $html = $($html);\r\n    const view = rv.bind($html[0], state);\r\n\r\n    const options = {\r\n        title: indicator.long_display_name,\r\n        autoOpen: false,\r\n        resizable: false,\r\n        width: 350,\r\n        height: 400,\r\n        modal: true,\r\n        my: 'center',\r\n        at: 'center',\r\n        of: window,\r\n        dialogClass:'indicator-builder-ui-dialog',\r\n        buttons: [\r\n            {\r\n                text: \"OK\",\r\n                click: () => {\r\n                    const options = { };\r\n                    let fields_are_valid = true;\r\n                    if(!indicator.cdl_indicator) { /* normal indicator */\r\n                      if(state.levels) {\r\n                        options.levels = JSON.parse(JSON.stringify(state.levels.values));\r\n                      }\r\n                      state.fields.forEach(field => {\r\n                         fields_are_valid = field.is_valid && fields_are_valid;\r\n                         if(field.type !== 'plotcolor') {\r\n                            options[field.key] = field.value\r\n                            return;\r\n                         }\r\n                         options[field.key] = [];\r\n                         if(options.levels && options.levels.length > 0) {\r\n                            options[field.key].push({\r\n                               color: field.value,\r\n                               from: _.minBy(options.levels, 'value').value,\r\n                               to: _.maxBy(options.levels, 'value').value\r\n                            });\r\n                         }\r\n                      });\r\n                    }\r\n                    else { /* cdl indicator */\r\n                       options.cdlIndicatorCode = state.id;\r\n                       options.onSeriesID = chart.series[0].options.id\r\n                    }\r\n\r\n                   if(state.id === 'fractal') { /* special case */\r\n                       options.onSeriesID = chart.series[0].options.id\r\n                   }\r\n\r\n                   if(!fields_are_valid) {\r\n                      $.growl.error({ message: \"Invalid parameter(s)!\".i18n() });\r\n                      return;\r\n                   }\r\n\r\n                    before_add_callback && before_add_callback();\r\n\r\n                    //Add indicator for the main series\r\n                    chart.series[0].addIndicator(state.id, options);\r\n\r\n                    closeDialog($html);\r\n                }\r\n            },\r\n            {\r\n                text: \"Cancel\",\r\n                click: () => closeDialog($html)\r\n            }\r\n        ],\r\n        icons: {\r\n            close: 'custom-icon-close',\r\n            minimize: 'custom-icon-minimize',\r\n            maximize: 'custom-icon-maximize'\r\n        }\r\n    };\r\n    $html.dialog(options)\r\n      .dialogExtend(_.extend(options, {maximizable:false, minimizable:false, collapsable:false}));\r\n    return $html;\r\n}\r\n\r\n/**\r\n * @param indicator - indicator options from indicators.json\r\n * @param containerIDWithHash - containerId where indicator needs to be added\r\n * @param before_add_cb - callback that will be called just before adding the indicator\r\n */\r\nexport const open = async (indicator, containerIDWithHash, before_add_cb) => {\r\n    before_add_callback = before_add_cb || before_add_callback;\r\n\r\n    const chart = $(containerIDWithHash).highcharts();\r\n    await init(chart, indicator);\r\n\r\n    $(\".indicator-builder\").dialog('open');\r\n    $(\".indicator-builder\").animate({ scrollTop: 0 }, 800);\r\n}\r\nexport default { open, };\r\n"]}